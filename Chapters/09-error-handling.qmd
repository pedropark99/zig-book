---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "run"
)
```



# Error handling and unions in Zig {#sec-error-handling}

In this chapter, I want to discuss how error handling is done in Zig.
Not every low-level language have an explicit system to handle errors.
In C for example, we don't have either *try catch* patterns or *exceptions*.

In C we normally check for errors by looking at the return value of
the function calls, and see if there is an "error status code" or
a valid value returned from the function.


## The *try catch* pattern

In Zig, we use a *try catch* pattern to handle errors,
using the keywords `try` and `catch`.
We already learned about the `try` keyword at @sec-main-file.
We use the `try` keyword whenever the expression that we are executing
might return error.

If you remember of what we learned in this section, when we say that an expression might
return an error, we are basically referring to an expression that have
a return type in the format `!T`.
The `!` indicates that this expression returns either an error or a value of type `T`.



